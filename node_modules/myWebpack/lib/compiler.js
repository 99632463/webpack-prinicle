const path = require('path');
const fs = require('fs');
const { render } = require('ejs');
const parser = require('@babel/parser');
const traverse = require('@babel/traverse').default;
const generator = require('@babel/generator').default;
const t = require('@babel/types');

class Compiler {
  constructor(config = {}) {
    this.config = config;
    this.module = {};   // 收集依赖
  }

  run() {
    this.buildModule(this.config.entry);
    this.emitFile();
  }

  buildModule(entry) {
    const content = this.getSource(entry);
    this.module[entry] = content;
  }

  getSource() {
    const entryAbsPath = path.resolve(process.cwd(), this.config.entry);
    return fs.readFileSync(entryAbsPath, 'utf8');
  }

  emitFile() {
    const readTemplate = fs.readFileSync(path.join(__dirname, 'main.ejs'), 'utf8');
    const replaceContent = render(readTemplate, {
      entryId: this.config.entry,
      modules: this.module
    });

    const outputPath = this.config.output.path;
    const outputFilename = this.config.output.filename;

    if (!fs.existsSync(outputPath)) {
      fs.mkdirSync(outputPath);
    }

    fs.writeFileSync(path.join(outputPath, outputFilename), replaceContent);
  }
}

module.exports = Compiler;