class AsyncSeriesHook {
  constructor(args) {
    this.tasks = [];
    this.args = args;
  }

  tapAsync(name, fn) {
    this.tasks.push(fn);
  }

  callAsync(...args) {
    if (args.length < this.args.length) {
      throw new Error('发布个数少了');
    }

    args = args.slice(0, this.args.length + 1);

    const finalTask = args.pop();
    let index = 0;
    let next = () => {
      if (index === this.tasks.length) {
        finalTask();
        return;
      }

      const task = this.tasks[index];
      index++;
      task(...args, next);
    }

    next();
  }

  tapPromise(name, fn) {
    this.tasks.push(fn);
  }

  promise(...args) {
    if (args.length < this.args.length) {
      throw new Error('发布个数少了');
    }

    args = args.slice(0, this.args.length + 1);

    const [firstTask, ...otherTasks] = this.tasks;
    return otherTasks.reduce((prev, task) => {
      return prev.then(() => task(...args));
    }, firstTask(...args));
  }
}